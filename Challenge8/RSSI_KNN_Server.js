var SerialPort = require("serialport");

portConfig = {
  baudRate: 9600,
  parser: SerialPort.parsers.readline("\n")
};


var CarStatus = "0";


var xbee_api = require('xbee-api');

var csvWriter = require('csv-write-stream');
var fs = require('fs');
var writer = csvWriter();
writer.pipe(fs.createWriteStream('out.csv'));

var i = 1;
var j = 1;
var m = 1;
var n = 1;
var answer = 1;

var C = xbee_api.constants;
var XBeeAPI = new xbee_api.XBeeAPI({
  api_mode: 2
});

var portName = process.argv[2];

var sampleDelay = 2000;

var app = require('express')();
var express=require('express');
var http = require('http').Server(app);
var io = require('socket.io')(http);
var KNN = require('ml-knn');

app.use('/fonts', express.static(__dirname + 'webpage/fonts'));
app.use('/images', express.static(__dirname + '/webpage/images'));
app.use('/', express.static(__dirname + '/webpage'));


app.get('/localization', function(req, res){
  res.sendfile('webpage/index.html');
});

var knn = new KNN();

var trainingSet =
[[41,68,68,74],[40,67,67,75],[40,67,69,75],[40,67,68,74],[39,71,70,78],
[49,83,74,84],[48,84,77,80],[46,84,75,86],[43,82,70,81],[51,80,70,81],
[53,89,69,84],[47,88,69,84],[48,86,68,85],[47,79,69,83],[47,84,68,83],
[55,92,67,81],[56,91,67,82],[60,86,67,80],[59,84,68,80],[52,92,71,81],
[58,86,71,81],[53,88,77,82],[55,88,77,80],[58,88,80,81],[57,87,75,83],
[60,96,71,81],[58,93,69,78],[61,98,72,80],[63,95,73,80],[64,94,76,77],
[64,92,64,82],[57,90,63,84],[59,91,64,79],[62,92,64,82],[57,90,68,81],
[52,91,65,79],[51,92,63,80],[52,92,62,83],[52,92,61,81],[51,90,70,79],
[57,97,67,75],[57,95,66,77],[57,93,74,79],[57,94,79,77],[61,95,78,82],
[66,99,56,74],[60,95,59,73],[57,97,60,76],[58,99,60,77],[58,97,60,81],
[64,101,57,84], [64,101,58,81], [64,102,56,70], [63,101,55,73],[62,101,57,76],
[55,100,53,71], [55,100,53,77], [58,102,54,70], [57,101,58,69],[57,101,57,70],
[56,102,56,69], [57,102,67,72], [57,101,67,72],[57,101,58,73],[57,100,56,70],
[57,100,63,70],[58,101,62,67],[59,101,68,68],[58,101,68,69],[59,102,63,68],
[69,101,52,64],[66,102,54,70],[67,101,53,75],[65,103,55,68],[67,102,53,71],
[69,98,51,69],[67,98,53,63],[67,100,53,63],[65,100,51,65],[64,102,52,66],
[71,102,48,58],[70,102,48,55],[69,101,43,56],[75,103,45,59],[69,103,48,59],
[68,102,53,64],[67,102,44,58],[68,101,50,64],[66,102,48,60],[70,102,41,56],
[64,102,37,49],[66,102,37,51],[66,102,37,52],[63,103,38,48],[65,102,38,51],
[68,102,36,59],[58,94,37,58],[63,100,33,58],[69,102,36,54],[70,102,36,56],
[80,100,46,47],[75,102,49,49],[78,102,45,52],[80,101,44,53],[78,102,41,54],
[78,102,50,48],[84,103,43,48],[81,102,50,50],[78,102,56,54],[81,102,50,51],
[80,102,47,49],[76,102,51,50],[79,102,48,51],[78,102,43,52],[80,102,47,49],
[79,102,52,37],[81,102,51,48],[78,102,56,51],[79,102,45,51],[80,102,49,46],
[82,102,52,46],[83,102,60,41],[79,99,59,49],[79,98,59,42],[86,101,70,47],
[68,97,53,41],[68,101,43,39],[69,99,51,40],[67,97,49,44],[67,98,51,39],
[68,96,53,36],[67,93,45,37],[67,93,45,37],[66,93,48,36],[66,92,47,37],
[67,95,57,48],[68,93,58,47],[71,93,60,51],[67,95,69,42],[69,91,72,47],
[76,93,61,58],[71,91,61,51],[72,93,59,53],[72,95,59,51],[50,94,62,54],
[72,90,73,59],[69,92,65,59],[70,89,64,64],[69,90,70,60],[69,89,73,55],
[70,97,57,53],[75,93,60,66],[70,92,58,54],[71,96,56,52],[67,98,57,53],
[68,98,73,63],[67,93,75,66],[67,95,73,59],[69,99,79,58],[69,98,71,66],
[73,88,71,61],[71,87,76,76],[69,86,76,66],[69,90,72,62],[70,91,68,63],
[77,85,69,66],[78,86,69,60],[74,89,68,62],[73,86,73,66],[75,84,71,62],
[63,89,84,77],[73,89,87,72],[69,88,78,61],[68,89,77,59],[70,89,75,58],
[69,91,73,69],[69,90,72,67],[73,86,71,61],[74,86,72,63],[73,87,75,64],
[65,86,86,70],[76,86,83,78],[66,86,88,70],[67,85,90,68],[72,88,87,69],
[74,87,89,69],[71,86,87,70],[69,89,79,66],[75,87,81,67],[70,88,73,61],
[63,87,85,70],[73,82,79,65],[67,80,73,70],[69,88,77,64],[61,88,81,76],
[55,83,75,59],[56,79,81,63],[61,88,77,73],[53,89,82,69],[58,91,81,69],
[52,80,80,62],[57,84,82,73],[62,87,80,75],[65,84,81,75],[74,79,76,72],
[63,83,79,75],[64,77,84,72],[55,82,74,76],[55,87,81,71],[66,84,75,73],
[53,76,88,78],[55,73,79,66],[57,79,80,66],[56,80,83,72],[46,87,87,74],
[49,74,88,75],[47,69,79,66],[53,77,79,70],[43,72,75,69],[48,77,86,74],
[36,64,80,70],[46,74,83,74],[45,70,87,77],[46,78,81,70],[44,62,81,68],
[45,66,76,81],[45,69,81,69],[45,74,77,81],[55,68,76,76],[58,70,84,78],
[42,73,76,82],[36,75,75,75],[40,81,84,87],[46,72,78,77],[44,74,87,81],
[38,85,71,78],[45,76,75,87],[52,68,77,77],[39,73,77,80],[38,74,81,82],
[40,77,76,84],[49,75,77,82],[43,72,73,82],[46,82,80,77],[43,70,74,79],
[43,75,77,76],[39,76,78,79],[51,75,80,83],[47,84,76,73],[42,85,79,78]];

var predictions = [ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
                    6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10,
                    11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15,
                    16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20,
                    21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25,
                    26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30,
                    31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35,
                    36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40,
                    41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
                    46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50];

knn.train(trainingSet, predictions);

knn.k = 3;

var dataset = [[0,0,0,0]];

//Note that with the XBeeAPI parser, the serialport's "data" event will not fire when messages are received!
portConfig = {
  baudRate: 9600,
  parser: XBeeAPI.rawParser()
};

io.on('connection', function(socket){
  console.log('a user connected');
  io.emit('updated CarStatus', CarStatus);
  socket.on('disconnect', function(){
  });
  socket.on('cStatus', function(msg){
    CarStatus = msg;
    sp.write(msg + "\n");
    console.log('car status:' + msg);
  });
});

http.listen(4000, function(){
  //listen on localhost port 4000
  console.log('listening on *:4000');
});


var sp;
sp = new SerialPort.SerialPort(portName, portConfig);


//Create a packet to be sent to all other XBEE units on the PAN.
// The value of 'data' is meaningless, for now.
var RSSIRequestPacket = {
  type: C.FRAME_TYPE.ZIGBEE_TRANSMIT_REQUEST,
  destination64: "000000000000ffff",
  broadcastRadius: 0x01,
  options: 0x00,
  data: "test"
}

var requestRSSI = function(){
  sp.write(XBeeAPI.buildFrame(RSSIRequestPacket));
  console.log("**********************************************************");
  if(answer > 0 && answer < 51) {
    io.emit('location', answer);
    //console.log("dataset: " + dataset);
    console.log("answer: " + answer);
  }
  writer.write({start: "START", Beacon:"", data: ""});
}

sp.on("open", function () {
  console.log('open');
  sp.on('data', function(receivedStatus){
    io.emit('upcStatus', receivedStatus);
    console.log('received:' + receivedStatus);
    CarStatus = receivedStatus;
  });
  requestRSSI();
  setInterval(requestRSSI, sampleDelay);
});

XBeeAPI.on("frame_object", function(frame) {
  if (frame.type == 144){
    console.log("Beacon ID: " + frame.data[1] + ", RSSI: " + (frame.data[0]));
    if(frame.data[1] == 1)
    {

      dataset[0][0] = frame.data[0];
      //console.log("Beacon 1 : " + dataset[0][0]);
      writer.write({start: "", Beacon:"1", data: dataset[0][0]});
      i++;

    }
    if(frame.data[1] == 2)
    {

      dataset[0][1] = frame.data[0];
      //console.log("Beacon 2 : " + dataset[0][1]);
      writer.write({Beacon:"2", data: dataset[0][1]});
      j++;
    }
    if(frame.data[1] == 3)
    {

      dataset[0][2] = frame.data[0];
      //console.log("Beacon 3 : " + dataset[0][2]);
      writer.write({Beacon:"3", data: dataset[0][2]});
      m++;
    }
    if(frame.data[1] == 4)
    {

      dataset[0][3] = frame.data[0];
      //console.log("Beacon 4 : " + dataset[0][3]);
      writer.write({Beacon:"4", data: dataset[0][3]});
      n++;
    }

    answer = knn.predict(dataset);
    // io.emit('location', answer);
    // console.log("answer: " + answer);
  }
});
